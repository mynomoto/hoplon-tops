(ns hoplon-tops.component
  (:require
    [hoplon-tops.rpc :as rpc]
    [clojure.string :as str]
    [hoplon.twitter.bootstrap]))

(defn word-item [w]
  (cell-let [{:keys [word origin invalid valid]} w]
    (li
      :class (cell= {:list-group-item true
                     :list-group-item-warning (and (= origin :local) (not invalid) (not valid))
                     :list-group-item-success (and (= origin :local) valid)
                     :invalid invalid
                     :list-group-item-danger invalid})
      (text "~{word}"))))

(defn word-list [ws]
  (ul :class "list-group"
    (loop-tpl :bindings [word (cell= (reverse ws))]
      (word-item word))))

(defn word-input [ws]
  (let [user-input (cell "")]
    (div :class "input-group"
      (input
        :class "form-control"
        :type "text"
        :value user-input
        :change #(reset! user-input @%))
      (span :class "input-group-btn"
        (button
          :class "btn btn-primary"
          :click #(when-not (str/blank? @user-input)
                    (rpc/add-word ws :local @user-input)
                    (rpc/submit-word @user-input)
                    (reset! user-input ""))
          "Submit")))))

(defn tops-component [ws]
  (div :class "row"
    (div :col {:lg 4 :md 5 :sm 6}
      (h1 "Hoplon Tops")
      (word-input ws)
      (word-list ws))))
